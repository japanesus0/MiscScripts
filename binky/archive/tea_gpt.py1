#!/usr/bin/python3

import time

def read_config_file(filename):
    config = {}
    with open(filename, 'r') as file:
        for line in file:
            identifier, name, description, volume, brew_indicator, brew_times = line.strip().split(';')
            config[identifier] = {
                'name': name,
                'description': description,
                'volume': float(volume),
                'brew_indicator': brew_indicator == 'True',
                'brew_times': list(map(int, brew_times.split(','))) if brew_indicator else None
            }
    return config

def display_menu(config):
    print("Menu:")
    for identifier, drink in config.items():
        print(f"{identifier}: {drink['name']} - {drink['description']}")
    print("0: Exit")

def get_selected_drink(config):
    while True:
        display_menu(config)
        selection = input("Select a drink (enter the unique identifier) or 'custom' for a custom drink: ")
        if selection.lower() == 'custom':
            return 'custom'
        elif selection == '0':
            return None
        elif selection in config:
            return selection
        else:
            print("Invalid selection. Please try again.")

def get_brew_time(config, drink_id):
    drink = config[drink_id]
    if not drink['brew_indicator']:
        return None

    if drink['brew_times']:
        print(f"Available brew times for {drink['name']}: {drink['brew_times']} minutes")
        while True:
            brew_time_input = input("Select a brew time (in minutes) or press Enter for the default value: ")
            if brew_time_input.strip() == '':
                return drink['brew_times'][0]
            try:
                brew_time = int(brew_time_input)
                if brew_time in drink['brew_times']:
                    return brew_time
                else:
                    print("Invalid brew time. Please try again.")
            except ValueError:
                print("Invalid input. Please enter a number or press Enter.")
    else:
        return int(input(f"Enter the custom brew time for {drink['name']} (in minutes): "))

def log_brewing(date_time, drink_name, volume):
    with open("brew_log.txt", 'a') as file:
        file.write(f"{date_time}: Brewed {drink_name} - Volume: {volume} ounces\n")

def format_time(milliseconds):
    seconds, milliseconds = divmod(milliseconds, 1000)
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}.{milliseconds:03d}"

def add_custom_drink(config):
    name = input("Enter the name of the custom drink: ")
    description = input("Enter the description of the custom drink: ")
    volume = float(input("Enter the default volume for the custom drink (ounces): "))
    brew_indicator = input("Does the custom drink require brewing? (True/False): ").lower() == 'true'
    brew_times = None
    if brew_indicator:
        brew_times = list(map(int, input("Enter preset brew times (comma-separated in minutes): ").split(',')))
    identifier = str(len(config) + 1)
    config[identifier] = {
        'name': name,
        'description': description,
        'volume': volume,
        'brew_indicator': brew_indicator,
        'brew_times': brew_times,
    }

def main():
    config = read_config_file("bev_input.dat")

    while True:
        drink_id = get_selected_drink(config)
        if drink_id is None:
            break

        if drink_id == 'custom':
            add_custom_drink(config)
            continue

        drink = config[drink_id]
        brew_time = get_brew_time(config, drink_id)

        if brew_time is None:
            continue

        date_time = time.strftime("%Y-%m-%d %H:%M:%S")

        volume = input(f"Please enter the volume for {drink['name']} (default {drink['volume']} ounces): ")
        volume = float(volume) if volume else drink['volume']

        if brew_time:
            print(f"\nPreparing {drink['name']}...")
            print(f"Brewing time: {format_time(brew_time * 60 * 1000)}")
            start_time = time.time()
            for i in range(brew_time * 60 * 10, 0, -1):
                remaining_milliseconds = int((start_time + brew_time * 60 - time.time()) * 1000)
                print(f"Time remaining: {format_time(remaining_milliseconds)}", end='\r')
                time.sleep(0.1)
            print("\nBrewing completed!")

        notes = input("Enter any notes (optional): ")

        log_brewing(date_time, drink['name'], volume)

        print(f"\nEnjoy your {drink['name']}!\n")

if __name__ == "__main__":
    main()
